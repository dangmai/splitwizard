/*jslint node: true*/
'use strict';

/**
 * Insert some string into another string at a specified position.
 * @param originalContent the original string.
 * @param insertContent what to insert.
 * @param insertPosition where to insert.
 * @return the new string.
 */
var insertAt = function (originalContent, insertContent, insertPosition) {
    return [
        originalContent.slice(0, insertPosition),
        insertContent,
        originalContent.slice(insertPosition)
    ].join('');
};

module.exports = {
    optimize: {
        flags: {
            //Does not print the build output.
            'q': 'quiet'
        },

        run: function (d, v, namedArgs) {
            //Remove the old dir
            v.rm('www-built');

            d.resolve(v.spawn('node', ['tools/r.js', '-o', 'tools/build.js'], {
                useConsole: !namedArgs.quiet
            }));
        }
    },

    tracking: {
        run: function (d, v, namedArgs) {
            var filesToTrack = [
                    'www-built/index.html',
                    'www-built/404.html'
                ],
                Mustache = require('mustache'),
                trackingScriptTmpl = v.read('www/js/app/templates/tracking.html'),
                fileContent,
                insertPosition;
            filesToTrack.forEach(function (file) {
                fileContent = v.read(file);
                insertPosition = fileContent.search(/<\/body>/);
                fileContent = insertAt(fileContent,
                    Mustache.render(trackingScriptTmpl, {
                        trackingId: 'UA-35365849-1'
                    }), insertPosition);
                v.write(file, fileContent);
            });
            d.resolve("Tracking files added");
        }
    },

    versionify: {
        run: function (d, v, namedArgs) {
            var files = [
                'index.html',
                '404.html',
                'js/app.js'
            ],
                fileContent,
                version = JSON.parse(v.read('package.json')).version;
            files = files.map(function (file) {
                return 'www-built/' + file;
            });
            files.forEach(function (file) {
                fileContent = v.read(file);
                fileContent = fileContent.replace(/v\.placeholder/g, 'v' + version);
                v.write(file, fileContent);
            });
            d.resolve("Versionify completed");
        }
    },

    clean: {
        run: function (d, v, namedArgs) {
            // Be careful not to remove all the libs, as we still need to
            // cache them for AppCache functionality. Basically, all scripts
            // that reside on the CDN need to be cached as well.

            var escape = function (s) {
                // Escape string to be used in JS regex. Code from:
                // http://stackoverflow.com/questions/3561493
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            },
                excludePattern = "(",
                fullFilePaths,
                filesToSave = [
                    "require.js"
                ];
            v.rm('www-built/js/app');
            v.rm('www-built/build.txt');

            filesToSave.forEach(function (file, index) {
                excludePattern += escape(file);
                if (index !== filesToSave.length - 1) {
                    excludePattern += "|";
                }
            });
            excludePattern += ")";
            fullFilePaths = v.getFilteredFileList("www-built/js/lib", null,
                new RegExp(excludePattern));
            fullFilePaths.forEach(function (file) {
                v.rm(file);
                console.log("Removed file " + file);
            });
            d.resolve("Clean completed");
        }
    },

    'appcache-build-manifest': require('volo-appcache')({
        depends: [],
        dir: 'www-built',
        htmlPath: 'index.html',
        manifestTemplate: '',
        extras: [
            'http://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.2/jquery.min.js',
            'http://cdnjs.cloudflare.com/ajax/libs/moment.js/1.7.0/moment.min.js',
            'http://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js',
            'http://cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js',
            'http://ajax.aspnetcdn.com/ajax/jquery.validate/1.10.0/jquery.validate.min.js',
            'http://netdna.bootstrapcdn.com/twitter-bootstrap/2.1.1/css/bootstrap.no-icons.min.css',
            'http://fonts.googleapis.com/css?family=Lobster|Cabin',
            'http://netdna.bootstrapcdn.com/font-awesome/2.0/css/font-awesome-protocol-less.css',
            'http://netdna.bootstrapcdn.com/font-awesome/2.0/css/font-awesome-ie7.css',
            'http://www.google-analytics.com/ga.js'
        ]
    }),

    'appcache-add-google-fonts': {
        /**
         * Add Google Webfonts' locations to the manifest files. It is really
         * hard to add these to `extras` params for volo-appcache, as that
         * param is initialized right when this file is parsed, while scraping
         * Google CSS takes some time.
         */
        run: function (d, v, namedArgs) {
            var file = 'www-built/manifest.appcache',
                fileContent = v.read(file),
                insertPosition = fileContent.search(/CACHE:\n/) + 7;

            require('google-fonts-scraper')('http://fonts.googleapis.com/css?family=Lobster|Cabin')
                .then(function (fontUrls) {
                    fileContent = insertAt(fileContent,
                        fontUrls.join('\n') + '\n', insertPosition);
                    v.write(file, fileContent);
                    d.resolve('Fonts scraped and added');
                }, function (err) {
                    d.reject(err);
                });
        }
    },

    'appcache-add-font-awesome-fonts': {
        /**
         * Add FontAwesome font locations to the manifest files.
         */
        run: function (d, v, namedArgs) {
            var request = require('request');
            request('http://netdna.bootstrapcdn.com/font-awesome/2.0/css/font-awesome-protocol-less.css',
                function (error, response, body) {
                    if (error) {
                        d.reject(new Error(error));
                    } else if (response.statusCode !== 200) {
                        d.reject(new Error("Server returns status code " + response.statusCode));
                    } else {
                        var fontUrls = body.match(/\/\/[a-zA-Z0-9\/._\-]+/g),
                            file = 'www-built/manifest.appcache',
                            fileContent = v.read(file),
                            insertPosition = fileContent.search(/CACHE:\n/) + 7;
                        fileContent = insertAt(fileContent,
                            fontUrls.join('\n') + '\n', insertPosition);
                        v.write(file, fileContent);
                        d.resolve("Font Awesome added");
                    }
                });
        }
    },

    /**
     * Because of our cache bursting strategy, volo-appcache won't cache
     * the correct static assets (as they need to be prepended with the
     * version number), so this is a necessary step to fix those assets'
     * paths. Also, any files that are not necessary can be removed here.
     */
    appcache: {
        depends: ['appcache-build-manifest', 'appcache-add-google-fonts', 'appcache-add-font-awesome-fonts'],

        run: function (d, v, namedArgs) {
            var escape = function (s) {
                // Escape string to be used in JS regex. Code from:
                // http://stackoverflow.com/questions/3561493
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            },
                fileContent = v.read('www-built/manifest.appcache'),
                version = JSON.parse(v.read('package.json')).version,
                filesToRemove,
                removeRegExPattern = "(";
            filesToRemove = [
                "404.html",
                "humans.txt",
                "robots.txt",
                "404-confused-wizard.jpg"
            ];
            // Correct static assets' paths
            //fileContent = fileContent.replace(/(.*?)(css|js|img)([\\/])(.+)/g,
            fileContent = fileContent.replace(/(http)*(.*?)(css|js|img)([\\/])(.+)/g,
                function (match, absolute, path, folder, sep, rest) {
                    if (absolute) {
                        // if this is an absolute URL, don't alter anything.
                        return absolute.concat(path, folder, sep, rest);
                    }
                    return path.concat("static", sep, "v", version, sep,
                        folder, sep, rest);
                });

            // Remove unnecessary files
            filesToRemove.forEach(function (file, index) {
                removeRegExPattern += "(^.*)" + escape(file) + "\\n";
                if (index !== filesToRemove.length - 1) {
                    removeRegExPattern += "|";
                }
            });
            removeRegExPattern += ")";
            // The RegEx needs to be in multi-line mode, so that ^ matches
            // the start of the line, and global mode to find all the files.
            fileContent = fileContent.replace(new RegExp(removeRegExPattern, "gm"),
                function (match, line) {
                    return "";
                });
            v.write('www-built/manifest.appcache', fileContent);
            d.resolve("AppCache preparation completed");
        }
    },

    build: {
        depends: ['optimize', 'versionify', 'tracking', 'clean', 'appcache'],

        /**
         * Build the site.
         */
        run: function (d, v, namedArgs) {
            d.resolve("Build completed");
        }
    }
};